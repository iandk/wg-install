#!/bin/bash


##############################
#       DO NOT CHANGE        #
##############################


ENDPOINT=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
SRV_IPV4="10.1.1.1/32"
SRV_IPV6="fd00::1/128"
PORT="51820"
# Default tunnel name
TUNNEL_NAME="wg0"
# Wireguard directory
TUNNEL_CONF="/etc/wireguard/"$TUNNEL_NAME".conf"

# Color codes
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'




##############################
#           FUNCTIONS        #
##############################


# Get the IPs of the last added user
addUser() {
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""

    # Ask for the username of the new user
    read -p "New username: " name

    # Check if the user exists
    if [ -d "/etc/wireguard/users/$name" ] 
    then
        echo -e "${RED}The user already exists!${NC}"
        exit
    fi

    # Get an available IPv4 and IPv6 from the list
    AVAILABLE_IPV4=$(cat /etc/wireguard/available_ips.txt | head -n 1 | cut -d, -f1)
    AVAILABLE_IPV6=$(cat /etc/wireguard/available_ips.txt | head -n 1 | cut -d, -f2)

    # Generate user public and user private key
    mkdir /etc/wireguard/users/$name
    umask 077; wg genkey | tee /etc/wireguard/users/$name"/"privatekey | wg pubkey > /etc/wireguard/users/$name"/"publickey
    USER_PUBKEY=$(cat /etc/wireguard/users/$name"/publickey")
    USER_PRIVKEY=$(cat /etc/wireguard/users/$name"/privatekey")

    # Add user to tunnel config
    echo "# $name" >> $TUNNEL_CONF
    echo "[Peer]" >> $TUNNEL_CONF
    echo "PublicKey =" $USER_PUBKEY >> $TUNNEL_CONF
    echo "AllowedIPs = $AVAILABLE_IPV4"",""$AVAILABLE_IPV6" >> $TUNNEL_CONF

    # Generate user config
    PUBKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_publickey")
    echo "[Interface]" >> /etc/wireguard/users/$name"/user.conf"
    echo "Address = $AVAILABLE_IPV4"",""$AVAILABLE_IPV6" >> /etc/wireguard/users/$name"/user.conf"
    echo "PrivateKey = "$user_PRIVKEY >> /etc/wireguard/users/$name"/user.conf"
    echo "DNS = 1.1.1.1, 2606:4700:4700::1111" >> /etc/wireguard/users/$name"/user.conf"
    echo "[Peer]" >> /etc/wireguard/users/$name"/user.conf"
    echo "Endpoint = "$ENDPOINT":"$PORT >> /etc/wireguard/users/$name"/user.conf"
    echo "PublicKey = "$PUBKEY >> /etc/wireguard/users/$name"/user.conf"
    echo "AllowedIPs = ::/0, 0.0.0.0/0" >> /etc/wireguard/users/$name"/user.conf"
    echo "PersistentKeepalive = 15" >> /etc/wireguard/users/$name"/user.conf"

    # Generate QR code
    (qrencode -t ansiutf8 < /etc/wireguard/users/$name"/user.conf") > /etc/wireguard/users/$name"/qr_code.qr"

    # Restart Wireguard
    wg-quick down $TUNNEL_NAME > /dev/null 2>&1
    wg-quick up $TUNNEL_NAME > /dev/null 2>&1
    systemctl enable wg-quick@$TUNNEL_NAME


    # Remove IPs from available IPs and add them to used IPs
    USED_IPS=$(cat /etc/wireguard/available_ips.txt | head -n 1)
    sed -i 1d /etc/wireguard/available_ips.txt
    echo $USED_IPS | cat - /etc/wireguard/used_ips.txt > temp && mv temp /etc/wireguard/used_ips.txt


    # Output user information
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""
    echo -e "${PURPLE}Name:${NC}" $name
    user_IP=$(cat /etc/wireguard/users/$name"/"user.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed "s/^[ \t]*//")
    echo -e "${PURPLE}user IPs:${NC}" $user_IP
    echo -e "${PURPLE}user config:${NC}" cat /etc/wireguard/users/$name"/user.conf"
    echo -e "${PURPLE}QR code:${NC}" cat /etc/wireguard/users/$name"/qr_code.qr"
    echo ""
}

deleteUser() {
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""

    # Ask for the username of the user to be deleted
    read -p "Delete username: " name

    # Check if the user exists
    if [ ! -d "/etc/wireguard/users/$name" ] 
    then
        echo -e "${RED}The user does not exist!${NC}"
        exit
    fi

    # Add used IPs to available IPs again and remove from used IPs list
    USED_IPS=$(cat /etc/wireguard/users/$name"/"user.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed "s/^[ \t]*//")
    echo $USED_IPS | cat - /etc/wireguard/available_ips.txt > temp && mv temp /etc/wireguard/available_ips.txt
    sed -i "s|$USED_IPS||g" /etc/wireguard/used_ips.txt
    sed -i '/^$/d' /etc/wireguard/used_ips.txt
    
    # Delete user from Wireguard config
    sed -i "/$name/,+3d" $TUNNEL_CONF

    # Delete directory
    rm -r /etc/wireguard/users/$name
    
    # Restart Wireguard
    wg-quick down $TUNNEL_NAME > /dev/null 2>&1
    wg-quick up $TUNNEL_NAME > /dev/null 2>&1

    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""

    # Done
    echo -e "${GREEN}Done!${NC}"
    echo ""
}


showUsers() {
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""
    echo -ne "${GREEN}Added users: ${NC}"
    users=$(ls /etc/wireguard/users)
    echo $users
    echo ""
}



showSingleUser() {
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""

    # Ask for the username of the user to be deleted
    read -p "Show username: " name

    # Check if the user exists
    if [ ! -d "/etc/wireguard/users/$name" ] 
    then
        echo -e "${RED}The user does not exist!${NC}"
        exit
    fi
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    echo ""
    echo -e "${PURPLE}Name:${NC}" $name
    USER_IP=$(cat /etc/wireguard/users/$name"/"user.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed "s/^[ \t]*//")
    echo -e "${PURPLE}User IPs:${NC}" $USER_IP
    echo -e "${PURPLE}User config:${NC}" cat /etc/wireguard/users/$name"/user.conf"
    echo -e "${PURPLE}QR code:${NC}" cat /etc/wireguard/users/$name"/qr_code.qr"
    echo ""
}




runUpdate() {
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    wget -qO /usr/local/bin/wg-install https://git.io/JedO6
    chmod +x /usr/local/bin/wg-install
}


runInstaller() {
    clear
    echo -e "${CYAN}WIREGUARD MANAGER${NC}"
    # Installing Wireguard
    echo "deb http://deb.debian.org/debian buster-backports main" >/etc/apt/sources.list.d/backports.list
    apt update 
    apt install -y linux-headers-$(uname -r) bc qrencode resolvconf wireguard-dkms wireguard wireguard-tools iptables-persistent
    # Clean existing directory
    rm -rf /etc/wireguard > /dev/null 2>&1
    # Create direcory
    mkdir -p /etc/wireguard/users
    # Generate public and private key
    umask 077; wg genkey | tee /etc/wireguard/$TUNNEL_NAME"_privatekey" | wg pubkey > /etc/wireguard/$TUNNEL_NAME"_publickey"
    PUBKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_publickey")
    PRIVKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_privatekey")
    # Prepare tunnel config
    rm $TUNNEL_CONF > /dev/null 2>&1
    echo "# AUTOGENERATED CONFIGURATION!" >> $TUNNEL_CONF
    echo "[Interface]" >> $TUNNEL_CONF
    echo "Address = $SRV_IPV4"",""$SRV_IPV6" >> $TUNNEL_CONF
    echo "PrivateKey = "$PRIVKEY >> $TUNNEL_CONF
    echo "ListenPort =" $PORT >> $TUNNEL_CONF
    # Enable IP forwarding
    sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    sed -i 's/#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/' /etc/sysctl.conf
    sysctl -p > /dev/null 2>&1
    # Setup NAT
    INTERFACE=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | head -n 1)
    iptables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE
    ip6tables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE

    # Write IP list
    wget -qO /etc/wireguard/available_ips.txt https://raw.githubusercontent.com/iandk/wg-install/master/available_ips.txt
    touch /etc/wireguard/used_ips.txt

    # Restart wireguard
    wg-quick down $TUNNEL_NAME > /dev/null 2>&1
    wg-quick up $TUNNEL_NAME > /dev/null 2>&1


    echo -e "${GREEN}Done!${NC}"



}




launchMenu(){
clear   
echo -ne "${CYAN}WIREGUARD MANAGER${NC}
""
${GREEN}1)${NC} Add user
${GREEN}2)${NC} Delete user
${GREEN}3)${NC} Show user details
${GREEN}4)${NC} List all users
${GREEN}5)${NC} Update
${GREEN}6)${NC} Install
${GREEN}0)${NC} Exit
""
Choose an option: "
        read a
        case $a in
	        1) addUser ;;
	        2) deleteUser ;;
	        3) showSingleUser ;;
	        4) showUsers ;;
	        5) runUpdate; launchMenu;;
	        6) runInstaller ;;
		0) exit 0 ;;
		*) echo -e $red"Wrong option."$clear; WrongCommand;;
        esac
}




##############################
#           MAIN FLOW        #
##############################


launchMenu
