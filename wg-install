#!/bin/bash

ENDPOINT=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
# Default tunnel name
TUNNEL_NAME="wg0"
# Wireguard directory
TUNNEL_CONF="/etc/wireguard/"$TUNNEL_NAME".conf"
# Default IPs for the Wireguard server#
SRV_IPV4="10.1.1.1/32"
SRV_IPV6="fd00::1/128"
PORT="51820"
#
# Color codes
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'
# Get the IPs of the last added client
addClient() {
    name=$1
    # Check if client already exists
    if [ -d "/etc/wireguard/clients/$name" ] 
    then
        echo -e "${RED}Sorry, the client already exists!${NC}"
        exit
    fi
    AVAILABLE_IPV4=$(cat /etc/wireguard/available_ips.txt | head -n 1 | cut -d, -f1)
    AVAILABLE_IPV6=$(cat /etc/wireguard/available_ips.txt | head -n 1 | cut -d, -f2)
    # Generate client public and client private key
    mkdir /etc/wireguard/clients/$name
    umask 077; wg genkey | tee /etc/wireguard/clients/$name"/"privatekey | wg pubkey > /etc/wireguard/clients/$name"/"publickey
    CLIENT_PUBKEY=$(cat /etc/wireguard/clients/$name"/publickey")
    CLIENT_PRIVKEY=$(cat /etc/wireguard/clients/$name"/privatekey")
    # Add client to tunnel config
    echo "# $name" >> $TUNNEL_CONF
    echo "[Peer]" >> $TUNNEL_CONF
    echo "PublicKey =" $CLIENT_PUBKEY >> $TUNNEL_CONF
    echo "AllowedIPs = $AVAILABLE_IPV4"",""$AVAILABLE_IPV6" >> $TUNNEL_CONF
    # Generate client config
    PUBKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_publickey")
    echo "[Interface]" >> /etc/wireguard/clients/$name"/client.conf"
    echo "Address = $AVAILABLE_IPV4"",""$AVAILABLE_IPV6" >> /etc/wireguard/clients/$name"/client.conf"
    echo "PrivateKey = "$CLIENT_PRIVKEY >> /etc/wireguard/clients/$name"/client.conf"
    echo "DNS = 1.1.1.1, 2606:4700:4700::1111" >> /etc/wireguard/clients/$name"/client.conf"
    echo "[Peer]" >> /etc/wireguard/clients/$name"/client.conf"
    echo "Endpoint = "$ENDPOINT":"$PORT >> /etc/wireguard/clients/$name"/client.conf"
    echo "PublicKey = "$PUBKEY >> /etc/wireguard/clients/$name"/client.conf"
    echo "AllowedIPs = ::/0, 0.0.0.0/0" >> /etc/wireguard/clients/$name"/client.conf"
    echo "PersistentKeepalive = 15" >> /etc/wireguard/clients/$name"/client.conf"
    # Generate QR code
    (qrencode -t ansiutf8 < /etc/wireguard/clients/$name"/client.conf") > /etc/wireguard/clients/$name"/qr_code.qr"
    # Restart Wireguard
    wg-quick down $TUNNEL_NAME > /dev/null 2>&1
    wg-quick up $TUNNEL_NAME > /dev/null 2>&1
    systemctl enable wg-quick@$TUNNEL_NAME


    # Remove IPs from available IPs and add them to used IPs
    USED_IPS=$(cat /etc/wireguard/available_ips.txt | head -n 1)
    sed -i 1d /etc/wireguard/available_ips.txt
    echo $USED_IPS | cat - /etc/wireguard/used_ips.txt > temp && mv temp /etc/wireguard/used_ips.txt

}
deleteClient() {
    name=$1
     # Check if client exists
    if [ ! -d "/etc/wireguard/clients/$name" ] 
    then
        echo -e "${RED}Sorry, the client does not exists!${NC}"
        exit
    fi
    # Add used IPs to available IPs again and remove from used IPs
    USED_IPS=$(cat /etc/wireguard/clients/$name"/"client.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed "s/^[ \t]*//")
    echo $USED_IPS | cat - /etc/wireguard/available_ips.txt > temp && mv temp /etc/wireguard/available_ips.txt
    sed -i "s|$USED_IPS||g" /etc/wireguard/used_ips.txt
    sed -i '/^$/d' /etc/wireguard/used_ips.txt
    
    # Delete client from Wireguard config
    sed -i "/$name/,+3d" $TUNNEL_CONF
    # Delete directory
    rm -r /etc/wireguard/clients/$name
    
    # Restart Wireguard
    wg-quick down $TUNNEL_NAME > /dev/null 2>&1
    wg-quick up $TUNNEL_NAME > /dev/null 2>&1
}
runInstaller() {
    clear
    # Installing Wireguard
    echo -e "${GREEN}Install Wireguard${NC}"
    echo "deb http://deb.debian.org/debian buster-backports main" >/etc/apt/sources.list.d/backports.list
    apt update 
    apt install -y linux-headers-$(uname -r) bc qrencode resolvconf wireguard-dkms wireguard wireguard-tools iptables-persistent
    # Create direcory
    mkdir /etc/wireguard/clients
    rm /etc/wireguard/* > /dev/null 2>&1
    rm -r /etc/wireguard/clients/* > /dev/null 2>&1
    # Generate public and private key
    echo -e "${GREEN}Generating Keys${NC}"
    umask 077; wg genkey | tee /etc/wireguard/$TUNNEL_NAME"_privatekey" | wg pubkey > /etc/wireguard/$TUNNEL_NAME"_publickey"
    PUBKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_publickey")
    PRIVKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_privatekey")
    # Prepare tunnel config
    rm $TUNNEL_CONF > /dev/null 2>&1
    echo -e "${GREEN}Prepare server config${NC}"
    echo "# AUTOGENERATED CONFIGURATION!" >> $TUNNEL_CONF
    echo "[Interface]" >> $TUNNEL_CONF
    echo "Address = $SRV_IPV4"",""$SRV_IPV6" >> $TUNNEL_CONF
    echo "PrivateKey = "$PRIVKEY >> $TUNNEL_CONF
    echo "ListenPort =" $PORT >> $TUNNEL_CONF
    # Enable IP forwarding
    echo -e "${GREEN}Enable IP forwarding${NC}"
    sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    sed -i 's/#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/' /etc/sysctl.conf
    sysctl -p > /dev/null 2>&1
    # Setup NAT
    echo -e "${GREEN}Setup NAT${NC}"
    INTERFACE=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | head -n 1)
    iptables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE
    ip6tables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE

    # Write IP list
    wget -qO /etc/wireguard/available_ips.txt https://raw.githubusercontent.com/iandk/wg-install/master/available_ips.txt
    touch /etc/wireguard/used_ips.txt
    
}
showClients() {
    clients=$(ls /etc/wireguard/clients)
    echo $clients
}

showClient() {
    name=$1
    # Check if client exists
    if [ ! -d "/etc/wireguard/clients/$name" ] 
    then
        echo -e "${RED}Sorry, the client does not exists!${NC}"
        exit
    fi
    echo -e "${PURPLE}Name:${NC}" $name
    CLIENT_IP=$(cat /etc/wireguard/clients/$name"/"client.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed "s/^[ \t]*//")
    echo -e "${PURPLE}Client IPs:${NC}" $CLIENT_IP
    echo -e "${PURPLE}Client config:${NC}" cat /etc/wireguard/clients/$name"/client.conf"
    echo -e "${PURPLE}QR code:${NC}" cat /etc/wireguard/clients/$name"/qr_code.qr"

}

update() {
    wget -qO /usr/local/bin/wg-install https://git.io/JedO6
    chmod +x /usr/local/bin/wg-install
    echo -e "${GREEN}Done!${NC}"
}

# Main flow
if [[ $1 == "add" ]]
    then
        if [ -z "$2" ]
            then
                echo -e "${RED}No client name given${NC}"
            else
                addClient $2
                echo -e "${GREEN}New client has been added!${NC}"
                echo -e "${PURPLE}Name:${NC}" $2
                CLIENT_IP=$(cat /etc/wireguard/clients/$2"/"client.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed "s/^[ \t]*//")
                echo -e "${PURPLE}Client IPs:${NC}" $CLIENT_IP
                echo -e "${PURPLE}Client config:${NC}" cat /etc/wireguard/clients/$2"/client.conf"
                echo -e "${PURPLE}QR code:${NC}" cat /etc/wireguard/clients/$2"/qr_code.qr"
            fi
elif [[ $1 == "delete" ]]
    then
        if [ -z "$2" ]
            then
                echo -e "${RED}No client name given${NC}"
            else
                deleteClient $2
                echo -e "${GREEN}Client has been deleted!${NC}"
            fi
elif [[ $1 == "install" ]]
    then
        runInstaller

elif [[ $1 == "clients" ]]
    then
        showClients

elif [[ $1 == "client" ]]
    then
        showClient $2

elif [[ $1 == "update" ]]
    then
        update


else 
    echo -e "${GREEN}Usage: wg-install [add/delete/install/clients/client] [clientname]${NC}\n\n"
    echo -e "${GREEN}Example: wg-install install${NC}"
    echo -e "Install Wireguard Server\n"
    echo -e "${GREEN}Example: wg-install add work${NC}"
    echo -e "Add new client with name 'work'\n"
    echo -e "${GREEN}Example: wg-install delete work${NC}"
    echo -e "Delete client 'work'\n"
    echo -e "${GREEN}Example: wg-install clients${NC}"
    echo -e "Show all clients\n"
    echo -e "${GREEN}Example: wg-install client work${NC}"
    echo -e "Show info about client 'work'\n"
    echo -e "${GREEN}Example: wg-install update${NC}"
    echo -e "Update the wg-install script"
    exit
fi
