#!/bin/bash

# Enter the domain or IP of your server, it'll be used as the endpoint of the clients
ENDPOINT="myvpn.domain.io"
TUNNEL_NAME="wg0"
# No changes needed
TUNNEL_CONF="/etc/wireguard/"$TUNNEL_NAME".conf"
# Default IP for the Wireguard server
SRV_IPV4="10.0.0.1/32"
SRV_IPV6="fd00::1/64"
PORT="51280"
#
#
# NO CHANGES AFTER THIS LINE!!!
#
#
# Color codes
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
# Get the IPs of the last added client
LAST_USED_IPS=$(cat /etc/wireguard/wg0.conf | grep "AllowedIPs" | tail -n 1 | sed 's/AllowedIPs//' | sed 's/=//' | sed -r 's/\s+//g')
CLIENT_IP=$(cat /etc/wireguard/clients/$name"/"client.conf | grep "Address" | tail -n 1 | sed 's/Address//' | sed 's/=//' | sed -r 's/\s+//g')
addClient() {
    clear
    echo -e "${GREEN}Adding new Wireguard Client${NC}"
    echo -e "${PURPLE}Please enter a name for the client, e.g. 'mac'${NC}"
    read -p 'Client name: ' name
    #read -p 'Endpoint (If behind NAT, press enter): ' endpoint
    echo -e "${PURPLE}Please enter an IPv4/IPv6 address IP for the client.${NC}"
    # Check if there is a recently used IP, e.g. on the second run
    if [ -z "$LAST_USED_IPS" ]
    then
        echo -e "${PURPLE}Recently used IPs: ${NC}" $SRV_IPV4","$SRV_IPV6
    else
        echo -e "${PURPLE}Recently used IPs: ${NC}" $LAST_USED_IPS
    fi
    read -p 'IPv4: ' ipv4
    read -p 'IPv6: ' ipv6
    echo -e "${PURPLE}Are the entered details correct?.${NC}"
    read -p 'Confirm: (y/n) ' confirm
    if [[ $confirm == "y" ]]
    then
        # Generate client public and client private key
        echo -e "${GREEN}Generating Keys${NC}"
        mkdir /etc/wireguard/clients/$name
        umask 077; wg genkey | tee /etc/wireguard/clients/$name"/"privatekey | wg pubkey > /etc/wireguard/clients/$name"/"publickey
        CLIENT_PUBKEY=$(cat /etc/wireguard/clients/$name"/publickey")
        CLIENT_PRIVKEY=$(cat /etc/wireguard/clients/$name"/privatekey")
        # Add client to tunnel config
        echo "# $name" >> $TUNNEL_CONF
        echo "[Peer]" >> $TUNNEL_CONF
        echo "PublicKey =" $CLIENT_PUBKEY >> $TUNNEL_CONF
        echo "AllowedIPs = $ipv4"",""$ipv6" >> $TUNNEL_CONF
        # Generate client config
        PUBKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_publickey")
        echo "[Interface]" >> /etc/wireguard/clients/$name"/client.conf"
        echo "Address = $ipv4"",""$ipv6" >> /etc/wireguard/clients/$name"/client.conf"
        echo "PrivateKey = "$CLIENT_PRIVKEY >> /etc/wireguard/clients/$name"/client.conf"
        echo "DNS = 1.1.1.1, 2606:4700:4700::1111" >> /etc/wireguard/clients/$name"/client.conf"
        echo "[Peer]" >> /etc/wireguard/clients/$name"/client.conf"
        echo "Endpoint = "$ENDPOINT":"$PORT >> /etc/wireguard/clients/$name"/client.conf"
        echo "PublicKey = "$PUBKEY >> /etc/wireguard/clients/$name"/client.conf"
        echo "AllowedIPs = ::/0, 0.0.0.0/0" >> /etc/wireguard/clients/$name"/client.conf"
        echo "PersistentKeepalive = 25" >> /etc/wireguard/clients/$name"/client.conf"
        # Generate QR code
        (qrencode -t ansiutf8 < /etc/wireguard/clients/$name"/client.conf") > /etc/wireguard/clients/$name"/qr_code.qr"
        # Restart Wireguard
        wg-quick down $TUNNEL_NAME > /dev/null 2>&1
        wg-quick up $TUNNEL_NAME > /dev/null 2>&1
    else 
        exit
    fi
}
runInstaller() {
    clear
    # Installing Wireguard
    echo -e "${GREEN}Installing Wireguard${NC}"
    echo "deb http://deb.debian.org/debian/ unstable main" > /etc/apt/sources.list.d/unstable.list
    printf 'Package: *\nPin: release a=unstable\nPin-Priority: 90\n' > /etc/apt/preferences.d/limit-unstable
    apt update 
    apt install -y linux-headers-$(uname -r) wireguard qrencode
    # Create direcory
    mkdir /etc/wireguard/clients
    rm /etc/wireguard/* > /dev/null 2>&1
    rm -r /etc/wireguard/clients/* > /dev/null 2>&1
    # Generate public and private key
    echo -e "${GREEN}Generating Keys${NC}"
    umask 077; wg genkey | tee /etc/wireguard/$TUNNEL_NAME"_privatekey" | wg pubkey > /etc/wireguard/$TUNNEL_NAME"_publickey"
    PUBKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_publickey")
    PRIVKEY=$(cat /etc/wireguard/$TUNNEL_NAME"_privatekey")
    # Prepare tunnel config
    rm $TUNNEL_CONF > /dev/null 2>&1
    echo -e "${GREEN}Prepare server config${NC}"
    echo "# AUTOGENERATED CONFIGURATION!" >> $TUNNEL_CONF
    echo "[Interface]" >> $TUNNEL_CONF
    echo "Address = $SRV_IPV4"",""$SRV_IPV6" >> $TUNNEL_CONF
    echo "PrivateKey = "$PRIVKEY >> $TUNNEL_CONF
    echo "ListenPort =" $PORT >> $TUNNEL_CONF
    # Enable IP forwarding
    echo -e "${GREEN}Enable IP forwarding${NC}"
    echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.forwarding=1" >> /etc/sysctl.conf
    sysctl -p > /dev/null 2>&1
    # Setup NAT
    echo -e "${GREEN}Setup NAT${NC}"
    INTERFACE=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | head -n 1)
    iptables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE
    ip6tables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE
}
# Main flow
if [[ $1 == "add" ]]
    then
        addClient
        clear
        echo -e "${GREEN}New client has been added!${NC}"
        echo -e "${PURPLE}Name:${NC}" $name
        echo -e "${PURPLE}Client IPs:${NC}" $CLIENT_IP
        echo -e "${PURPLE}Client config:${NC}" cat /etc/wireguard/clients/$name"/client.conf"
        echo -e "${PURPLE}QR code:${NC}" cat /etc/wireguard/clients/$name"/qr_code.qr"

elif [[ $1 == "install" ]]
    then
        runInstaller
else 
    echo -e "${GREEN}Usage: wg-client [add/install]${NC}"
    exit
fi
